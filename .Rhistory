install.packages('readxl')
########
#agrupamento
library(readxl)
dados <- read_xlsx("data_all.xlsx", header = T, sep = )
dados <- read_xlsx("data_all.xlsx", header = T)
?read_xlsx
dados <- read_xlsx("data_all.xlsx")
View(dados)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
####################################
#agrupamento
library(readxl)
library(factoextra)
library(skimr)
library(kmeans)
library(kmeans)
library(skimr)
dados <- read_xlsx("data_all.xlsx", col_names = TRUE)
#tirando valores NA e coluna de blocos
dados[is.na(dados)] <- 0
dados$bloco <- NULL
dados$gen <- NULL
dados
#escalonando
dadosScaled <- scale(dados)
#número ótimos de clusters
#Desta forma, utilizando a noção da soma dos quadrados intra cluster é possível verificar que o número ótimo de clusters para a amostra é 3. Isto porque novos clusters acima de 3 possuem baixo ganho para aumentar a diferenciação dos demais.
fviz_nbclust(dados, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
#####
#análise de clusters
dados2 <- read_xlsx("data_all.xlsx", col_names = TRUE)
meanDados <- aggregate(dados, by= list(dados2$gen), FUN = mean)
View(meanDados)
dadosScaled <- scale(meanDados)
View(meanDados)
dadosScaled <- scale(meanDados[,-1])
View(dadosScaled)
#escalonando
dadosScaled <- scale(dados)
dadosScaled <- scale(meanDados[,-1])
kdadosScaled <- kmeans(dadosScaled, centers= 3)
print(kdadosScaled)
print(kdados)
kdados <- kmeans(dados, centers = 3)
print(kdados)
print(kdadosScaled)
View(kdadosScaled)
View(dadosScaled)
View(dados)
kmeans
?kmeans
#Carregamento dos dados
data("mtcars")
df=scale(mtcars)
head(df, n=3)
#Carregamento dos dados
data("mtcars")
df=scale(mtcars)
head(df, n=3)
View(df)
View(mtcars)
####################################
#agrupamento
library(readxl)
library(factoextra)
library(skimr)
library(kmeans)
dados <- read_xlsx("data_all.xlsx", col_names = TRUE)
#tirando valores NA e coluna de blocos
dados[is.na(dados)] <- 0
dados$bloco <- NULL
View(dados)
#####
#análise de clusters
dados2 <- read_xlsx("data_all.xlsx", col_names = TRUE)
meanDados <- aggregate(dados, by= list(dados2$gen), FUN = mean)
View(meanDados)
#dadosScaled <- scale(meanDados[,-1])
data_frame <- data_frame %>% remove_rownames %>% column_to_rownames(var="gen")
#dadosScaled <- scale(meanDados[,-1])
data_frame <- meanDados %>% remove_rownames %>% column_to_rownames(var="gen")
library(tidyverse)
#dadosScaled <- scale(meanDados[,-1])
data_frame <- meanDados %>% remove_rownames %>% column_to_rownames(var="gen")
View(meanDados)
#dadosScaled <- scale(meanDados[,-1])
data_frame <- data.frame(meanDados, row.names = 1)
View(data_frame)
data_frame <- data_frame[,-1]
View(data_frame)
kdados <- kmeans(data_frame, centers = 3)
View(kdados)
print(kdados)
data_frame2 <- cbind(meanDados, cluster=kdados$cluster)
View(data_frame2)
fviz_cluster(kdados, data=data_frame2,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
ellipse.type="euclid",
star.plot=TRUE,
repel=TRUE,
ggtheme=theme_minimal()
)
library(factoextra)
source("G:/Meu Drive/TCC - Caio Marchiorato/data/genitores_script.R", echo=TRUE)
fviz_cluster(kdados, data=data_frame2,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
ellipse.type="euclid",
star.plot=TRUE,
repel=TRUE,
ggtheme=theme_minimal()
)
View(data_frame2)
View(data_frame)
View(data_frame2)
data_frame2 <- data_frame2[,1:2]
View(data_frame2)
data_frame2 <- cbind(meanDados, cluster=kdados$cluster)
data_frame2 <- data_frame2[,-1:2]
View(data_frame2)
data_frame2 <- data_frame2[,-(1:2)]
View(data_frame2)
fviz_cluster(kdados, data=data_frame2,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
ellipse.type="euclid",
star.plot=TRUE,
repel=TRUE,
ggtheme=theme_minimal()
)
fviz_cluster(kdados, data=data_frame2,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
ellipse.type="euclid",
star.plot=TRUE,
repel=TRUE,
ggtheme=theme_minimal()
)
View(data_frame)
#clusterização aglomerativa
dista = dist(data_frame, method='euclidean')
